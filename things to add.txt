- Possible fix to Touch and pointe
let activePointers = {};

function touchingHitbox(pointer, hitbox) {
  // Implement your hitbox detection logic here
  // This function should return true if the pointer is within the hitbox
  // Example:
  return pointer.clientX >= hitbox.left &&
         pointer.clientX <= hitbox.right &&
         pointer.clientY >= hitbox.top &&
         pointer.clientY <= hitbox.bottom;
}

function handlePointerEvent(event) {
  const pointerId = event.pointerId;
  const pointer = event.type === 'touch' ? event.changedTouches[0] : event;

  switch (event.type) {
    case 'pointerdown':
      activePointers[pointerId] = {
        id: pointerId,
        x: pointer.clientX,
        y: pointer.clientY,
        isDragging: false
      };

      if (touchingHitbox(pointer, hitbox)) {
        // Handle pointer down on hitbox
        console.log('Pointer down on hitbox');
      }
      break;

    case 'pointermove':
      if (activePointers[pointerId]) {
        activePointers[pointerId].x = pointer.clientX;
        activePointers[pointerId].y = pointer.clientY;

        if (activePointers[pointerId].isDragging) {
          // Handle dragging logic
          console.log('Dragging');
        } else if (touchingHitbox(pointer, hitbox)) {
          // Handle hover or potential drag start
          console.log('Hovering over hitbox');
          activePointers[pointerId].isDragging = true; // Start dragging
        }
      }
      break;

    case 'pointerup':
    case 'pointercancel':
      if (activePointers[pointerId]) {
        delete activePointers[pointerId];
      }
      break;
  }
}

window.addEventListener("pointerdown", handlePointerEvent);
window.addEventListener("pointermove", handlePointerEvent);
window.addEventListener("pointerup", handlePointerEvent);
window.addEventListener("pointercancel", handlePointerEvent);

- Update viewport meta tag to prevent pinch zooming <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

- Add to html in css {touch-action: manipulation; overscroll-behavior-y: none;}

- Use scaling in mouse pos 
  let rect = canvas.getBoundingClientRect();
  const scaleFactorX = canvas.width / rect.width;
  const scaleFactorY = canvas.height / rect.height;
  const scaledX = (event.clientX - rect.left) * scaleFactorX;
  const scaledY = (event.clientY - rect.top) * scaleFactorY;
  mouse.x = scaledX;
  mouse.y = scaledY;
  mouse.pos = [Math.round(scaledX), Math.round(scaledY)];